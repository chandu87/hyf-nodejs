{"version":3,"sources":["../src/index.js"],"names":["app","myContactList","ContactList","use","bodyParser","urlencoded","extended","json","get","req","res","send","Object","keys","query","length","list","filteredData","filter","element","age","name","post","contact","Contact","body","addContact","then","patch","contactToUpdate","console","log","updateContact","params","contact_id","delete","deleteContact","listen"],"mappings":";;AAAA;;;;AACA;;AAIA;;;;;;AAHA,MAAMA,MAAM,wBAAZ;;AAEA,MAAMC,gBAAgB,IAAIC,wBAAJ,CAAgB,gBAAhB,CAAtB;;;AAGAF,IAAIG,GAAJ,CAAQC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACA;AACAN,IAAIG,GAAJ,CAAQC,qBAAWG,IAAX,EAAR;;AAEA;AACAP,IAAIQ,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC9BA,MAAIC,IAAJ,CAAS,aAAT;AACD,CAFD;;AAIA;AACAX,IAAIQ,GAAJ,CAAQ,WAAR,EAAqB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACtC;AACA,MAAI,CAACE,OAAOC,IAAP,CAAYJ,IAAIK,KAAhB,EAAuBC,MAA5B,EAAoC;AAClCL,QAAIC,IAAJ,CAASV,cAAce,IAAvB;AACD,GAFD,MAEO;AACL,UAAMC,eAAehB,cAAce,IAAd,CAAmBE,MAAnB,CAA0BC,WAAW;AACxD,aAAOA,QAAQC,GAAR,IAAeX,IAAIK,KAAJ,CAAUM,GAAhC;AACD,KAFoB,CAArB;AAGAV,QAAIC,IAAJ,CAASM,aAAaF,MAAb,IAAuB,CAAvB,GAA2B,kCAA3B,GAAgEE,YAAzE;AACD;AACF,CAVD;;AAYA;AACAjB,IAAIQ,GAAJ,CAAQ,OAAR,EAAiB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAClCA,MAAIC,IAAJ,CAAS,EAAEU,MAAM,SAAR,EAAT;AACD,CAFD;;AAIA;AACArB,IAAIsB,IAAJ,CAAS,WAAT,EAAsB,UAASb,GAAT,EAAcC,GAAd,EAAmB;AACvC;AACA,QAAMa,UAAU,IAAIC,oBAAJ,CAAYf,IAAIgB,IAAhB,CAAhB;AACAxB,gBAAcyB,UAAd,CAAyBH,OAAzB,EAAkCI,IAAlC,CAAuCX,QAAQN,IAAIC,IAAJ,CAASK,IAAT,CAA/C;AACD,CAJD;;AAMA;AACAhB,IAAI4B,KAAJ,CAAU,uBAAV,EAAmC,UAASnB,GAAT,EAAcC,GAAd,EAAmB;AAClD,QAAMmB,kBAAkB,IAAIL,oBAAJ,CAAYf,IAAIgB,IAAhB,CAAxB;AACAK,UAAQC,GAAR,CAAYF,eAAZ;AACFnB,MAAIC,IAAJ,CAASV,cAAc+B,aAAd,CAA4BvB,IAAIwB,MAAJ,CAAWC,UAAvC,EAAmDL,eAAnD,CAAT;AACD,CAJD;;AAMA;AACA7B,IAAImC,MAAJ,CAAW,uBAAX,EAAoC,UAAS1B,GAAT,EAAcC,GAAd,EAAmB;AACrDA,MAAIC,IAAJ,CAASV,cAAcmC,aAAd,CAA4B3B,IAAIwB,MAAJ,CAAWC,UAAvC,CAAT;AACD,CAFD;;AAIA;AACAlC,IAAIqC,MAAJ,CAAW,IAAX,EAAiB,YAAW;AAC1BP,UAAQC,GAAR,CAAY,0BAAZ;AACD,CAFD","file":"index.js","sourcesContent":["import express from \"express\";\nimport { Contact, ContactList } from \"./ContactList\";\nconst app = express();\n\nconst myContactList = new ContactList(\"./my_list.json\");\nimport bodyParser from \"body-parser\";\n\napp.use(bodyParser.urlencoded({ extended: false }));\n//parse appliation JSON\napp.use(bodyParser.json());\n\n//GET ROUTE for HOME\napp.get(\"/\", function(req, res) {\n  res.send(\"Hello world\");\n});\n\n//GET ROUTE for Contacts\napp.get(\"/contacts\", function(req, res) {\n  //----- Checking whether requested query is empty or not -------\n  if (!Object.keys(req.query).length) {\n    res.send(myContactList.list);\n  } else {\n    const filteredData = myContactList.list.filter(element => {\n      return element.age == req.query.age;\n    });\n    res.send(filteredData.length == 0 ? \"Entered age not found, Try again\" : filteredData);\n  }\n});\n\n//GET ROUTE for sample testing\napp.get(\"/test\", function(req, res) {\n  res.send({ name: \"chandra\" });\n});\n\n//POST ROUTE for Adding contacts\napp.post(\"/contacts\", function(req, res) {\n  // console.log(req.body);\n  const contact = new Contact(req.body);\n  myContactList.addContact(contact).then(list => res.send(list));\n});\n\n//PATCH ROUTE for updating contacts which can be found in POSTMAN\napp.patch(\"/contacts/:contact_id\", function(req, res) {\n    const contactToUpdate = new Contact(req.body);\n    console.log(contactToUpdate);\n  res.send(myContactList.updateContact(req.params.contact_id, contactToUpdate));\n});\n\n//DELETE ROUTE for deleting a item \napp.delete(\"/contacts/:contact_id\", function(req, res) {\n  res.send(myContactList.deleteContact(req.params.contact_id));\n});\n\n//Server listening PORT assignment\napp.listen(3000, function() {\n  console.log(\"Server started at : 3000\");\n});\n"]}